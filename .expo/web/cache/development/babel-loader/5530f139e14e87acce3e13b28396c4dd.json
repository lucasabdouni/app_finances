{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lucas/Documents/Projetos/Expo/meuappcomexpo/src/screens/Register/index.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useForm } from 'react-hook-form';\nimport { useNavigation } from '@react-navigation/native';\nimport uuid from 'react-native-uuid';\nimport { Button } from \"../../components/Form/Button\";\nimport { CategorySelectButton } from \"../../components/Form/CategorySelectButton\";\nimport { InputForm } from \"../../components/Form/InputForm\";\nimport { TransactionTypeButton } from \"../../components/Form/TransactionTypeButton\";\nimport { CategorySelect } from \"../CategorySelect\";\nimport { Container, Fields, Form, Header, Title, TransactionsTypes } from \"./styled\";\nvar schema = Yup.object().shape({\n  name: Yup.string().required('Nome é obrigatório'),\n  amount: Yup.number().typeError('Informe um valor númerico').positive('O valor não pode ser negativo').required('O valor é obrigatório')\n});\nexport function Register() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      transactionType = _useState2[0],\n      setTransactionType = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categoryModalOpen = _useState4[0],\n      setCategoryModalOpen = _useState4[1];\n\n  var _useState5 = useState({\n    key: 'category',\n    name: 'Categoria'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      category = _useState6[0],\n      setCategory = _useState6[1];\n\n  var navigation = useNavigation();\n\n  var _useForm = useForm({\n    resolver: yupResolver(schema)\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      errors = _useForm.formState.errors;\n\n  function handleTransactionTypeSelect(type) {\n    setTransactionType(type);\n  }\n\n  function handleCloseSelectCategoryModal() {\n    setCategoryModalOpen(false);\n  }\n\n  function handleOpenSelectCategoryModal() {\n    setCategoryModalOpen(true);\n  }\n\n  function handleRegister(form) {\n    var newTransaction, dataKey, data, currentData, dataFormatted;\n    return _regeneratorRuntime.async(function handleRegister$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (transactionType) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert('Selecione o tipo da transação'));\n\n          case 2:\n            if (!(category.key === 'category')) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert('Selecione a categoria'));\n\n          case 4:\n            newTransaction = {\n              id: String(uuid.v4()),\n              name: form.name,\n              amount: form.amount,\n              type: transactionType,\n              category: category.key,\n              date: new Date()\n            };\n            _context.prev = 5;\n            dataKey = '@gofinances:transactions';\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(dataKey));\n\n          case 9:\n            data = _context.sent;\n            currentData = data ? JSON.parse(data) : [];\n            dataFormatted = [].concat(_toConsumableArray(currentData), [newTransaction]);\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(dataKey, JSON.stringify(dataFormatted)));\n\n          case 14:\n            reset();\n            setTransactionType('');\n            setCategory({\n              key: 'category',\n              name: 'Categoria'\n            });\n            navigation.navigate('Listagem');\n            _context.next = 24;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](5);\n            console.log(_context.t0);\n            Alert.alert('Não foi possível salvar');\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[5, 20]], Promise);\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Cadastro\")), React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, React.createElement(Fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, React.createElement(InputForm, {\n    control: control,\n    name: \"name\",\n    placeholder: \"Nome\",\n    autoCapitalize: \"sentences\",\n    autoCorrect: false,\n    error: errors.name && errors.name.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), React.createElement(InputForm, {\n    control: control,\n    name: \"amount\",\n    placeholder: \"Pre\\xE7o\",\n    keyboardType: \"numeric\",\n    error: errors.amount && errors.amount.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), React.createElement(TransactionsTypes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, React.createElement(TransactionTypeButton, {\n    type: \"up\",\n    title: \"Income\",\n    onPress: function onPress() {\n      return handleTransactionTypeSelect('positive');\n    },\n    isActive: transactionType === 'positive',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }), React.createElement(TransactionTypeButton, {\n    type: \"down\",\n    title: \"Outcome\",\n    onPress: function onPress() {\n      return handleTransactionTypeSelect('negative');\n    },\n    isActive: transactionType === 'negative',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  })), React.createElement(CategorySelectButton, {\n    title: category.name,\n    onPress: handleOpenSelectCategoryModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    title: \"Enviar\",\n    onPress: handleSubmit(handleRegister),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  })), React.createElement(Modal, {\n    visible: categoryModalOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, React.createElement(CategorySelect, {\n    category: category,\n    setCategory: setCategory,\n    closeSelectCategory: handleCloseSelectCategoryModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/lucas/Documents/Projetos/Expo/meuappcomexpo/src/screens/Register/index.tsx"],"names":["React","useState","Yup","yupResolver","AsyncStorage","useForm","useNavigation","uuid","Button","CategorySelectButton","InputForm","TransactionTypeButton","CategorySelect","Container","Fields","Form","Header","Title","TransactionsTypes","schema","object","shape","name","string","required","amount","number","typeError","positive","Register","transactionType","setTransactionType","categoryModalOpen","setCategoryModalOpen","key","category","setCategory","navigation","resolver","control","handleSubmit","reset","errors","formState","handleTransactionTypeSelect","type","handleCloseSelectCategoryModal","handleOpenSelectCategoryModal","handleRegister","form","Alert","alert","newTransaction","id","String","v4","date","Date","dataKey","getItem","data","currentData","JSON","parse","dataFormatted","setItem","stringify","navigate","console","log","Keyboard","dismiss","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Modal, TouchableWithoutFeedback, Keyboard, Alert } from 'react-native';\n\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { useForm } from 'react-hook-form';\nimport { useNavigation } from '@react-navigation/native';\n\nimport uuid from 'react-native-uuid';\nimport { Button } from '../../components/Form/Button';\nimport { CategorySelectButton } from '../../components/Form/CategorySelectButton';\nimport { InputForm } from '../../components/Form/InputForm';\nimport { TransactionTypeButton } from '../../components/Form/TransactionTypeButton';\n\nimport { CategorySelect } from '../CategorySelect';\n\nimport {\n  Container,\n  Fields,\n  Form,\n  Header,\n  Title,\n  TransactionsTypes,\n} from './styled';\n\ninterface FormData {\n  name: string;\n  amount: string;\n}\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Nome é obrigatório'),\n  amount: Yup.number()\n    .typeError('Informe um valor númerico')\n    .positive('O valor não pode ser negativo')\n    .required('O valor é obrigatório'),\n});\n\nexport function Register() {\n  const [transactionType, setTransactionType] = useState('');\n  const [categoryModalOpen, setCategoryModalOpen] = useState(false);\n\n  const [category, setCategory] = useState({\n    key: 'category',\n    name: 'Categoria',\n  });\n\n  const navigation = useNavigation();\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  function handleTransactionTypeSelect(type: 'positive' | 'negative') {\n    setTransactionType(type);\n  }\n\n  function handleCloseSelectCategoryModal() {\n    setCategoryModalOpen(false);\n  }\n\n  function handleOpenSelectCategoryModal() {\n    setCategoryModalOpen(true);\n  }\n\n  async function handleRegister(form: FormData) {\n    if (!transactionType) {\n      return Alert.alert('Selecione o tipo da transação');\n    }\n\n    if (category.key === 'category') {\n      return Alert.alert('Selecione a categoria');\n    }\n\n    const newTransaction = {\n      id: String(uuid.v4()),\n      name: form.name,\n      amount: form.amount,\n      type: transactionType,\n      category: category.key,\n      date: new Date(),\n    };\n\n    try {\n      const dataKey = '@gofinances:transactions';\n\n      const data = await AsyncStorage.getItem(dataKey);\n      const currentData = data ? JSON.parse(data) : [];\n\n      const dataFormatted = [...currentData, newTransaction];\n\n      await AsyncStorage.setItem(dataKey, JSON.stringify(dataFormatted));\n\n      reset();\n      setTransactionType('');\n      setCategory({\n        key: 'category',\n        name: 'Categoria',\n      });\n\n      navigation.navigate('Listagem');\n    } catch (error) {\n      console.log(error);\n      Alert.alert('Não foi possível salvar');\n    }\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n      <Container>\n        <Header>\n          <Title>Cadastro</Title>\n        </Header>\n        <Form>\n          <Fields>\n            <InputForm\n              control={control}\n              name=\"name\"\n              placeholder=\"Nome\"\n              autoCapitalize=\"sentences\"\n              autoCorrect={false}\n              error={errors.name && errors.name.message}\n            />\n            <InputForm\n              control={control}\n              name=\"amount\"\n              placeholder=\"Preço\"\n              keyboardType=\"numeric\"\n              error={errors.amount && errors.amount.message}\n            />\n            <TransactionsTypes>\n              <TransactionTypeButton\n                type=\"up\"\n                title=\"Income\"\n                onPress={() => handleTransactionTypeSelect('positive')}\n                isActive={transactionType === 'positive'}\n              />\n              <TransactionTypeButton\n                type=\"down\"\n                title=\"Outcome\"\n                onPress={() => handleTransactionTypeSelect('negative')}\n                isActive={transactionType === 'negative'}\n              />\n            </TransactionsTypes>\n\n            <CategorySelectButton\n              title={category.name}\n              onPress={handleOpenSelectCategoryModal}\n            />\n          </Fields>\n          <Button title=\"Enviar\" onPress={handleSubmit(handleRegister)} />\n        </Form>\n\n        <Modal visible={categoryModalOpen}>\n          <CategorySelect\n            category={category}\n            setCategory={setCategory}\n            closeSelectCategory={handleCloseSelectCategoryModal}\n          />\n        </Modal>\n      </Container>\n    </TouchableWithoutFeedback>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}