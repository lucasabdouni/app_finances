{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lucas/Documents/Projetos/Expo/meuappcomexpo/src/screens/Resume/index.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { VictoryPie } from 'victory-native';\nimport { addMonths, subMonths, format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\nimport HistoryCard from \"../../components/HistoryCard\";\nimport { useTheme } from 'styled-components';\nimport { Container, Content, Header, Title, ChartContainer, MonthSelect, MonthSelectButton, MonthSelectIcon, Month, LoadContainer } from \"./styles\";\nimport { categories } from \"../../utils/categories\";\nimport { RFValue } from 'react-native-responsive-fontsize';\nimport { useFocusEffect } from '@react-navigation/native';\nexport function Resume() {\n  var _this = this;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedDate = _useState4[0],\n      setSelectedDate = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      totalByCategories = _useState6[0],\n      setTotalByCategories = _useState6[1];\n\n  var theme = useTheme();\n\n  function handleDateChange(action) {\n    setIsLoading(true);\n\n    if (action === 'next') {\n      setSelectedDate(addMonths(selectedDate, 1));\n    } else {\n      setSelectedDate(subMonths(selectedDate, 1));\n    }\n  }\n\n  function loadData() {\n    var dataKey, response, responseFormatted, expensives, expensivesTotal, totalByCategory;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(false);\n            dataKey = '@gofinances:transactions';\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(dataKey));\n\n          case 4:\n            response = _context.sent;\n            responseFormatted = response ? JSON.parse(response) : [];\n            expensives = responseFormatted.filter(function (expensive) {\n              return expensive.type === 'negative' && new Date(expensive.date).getMonth() === selectedDate.getMonth() && new Date(expensive.date).getFullYear() === selectedDate.getFullYear();\n            });\n            expensivesTotal = expensives.reduce(function (accumulator, expensive) {\n              return accumulator + Number(expensive.amount);\n            }, 0);\n            totalByCategory = [];\n            categories.forEach(function (category) {\n              var categorySum = 0;\n              expensives.forEach(function (expensive) {\n                if (expensive.category === category.key) {\n                  categorySum += Number(expensive.amount);\n                }\n              });\n\n              if (categorySum > 0) {\n                var totalFormatted = categorySum.toLocaleString('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                });\n                var percent = categorySum / expensivesTotal * 100;\n                var percentFormatted = percent.toFixed(0) + \"%\";\n                totalByCategory.push({\n                  key: category.key,\n                  name: category.name,\n                  color: category.color,\n                  total: categorySum,\n                  percent: percent,\n                  percentFormatted: percentFormatted,\n                  totalFormatted: totalFormatted\n                });\n              }\n            });\n            setTotalByCategories(totalByCategory);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    loadData();\n  }, []);\n  useFocusEffect(useCallback(function () {\n    loadData();\n  }, [selectedDate]));\n  return React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Resumo por categoria\")), isLoading ? React.createElement(LoadContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, React.createElement(ActivityIndicator, {\n    color: theme.colors.primary,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  })) : React.createElement(Content, {\n    showsHorizontalScrollIndicator: false,\n    contentContainerStyle: {\n      paddingHorizontal: 24,\n      paddingBottom: useBottomTabBarHeight()\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, React.createElement(MonthSelect, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, React.createElement(MonthSelectButton, {\n    onPress: function onPress() {\n      return handleDateChange('prev');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, React.createElement(MonthSelectIcon, {\n    name: \"chevron-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  })), React.createElement(Month, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, format(selectedDate, 'MMMM, yyyy', {\n    locale: ptBR\n  })), React.createElement(MonthSelectButton, {\n    onPress: function onPress() {\n      return handleDateChange('next');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, React.createElement(MonthSelectIcon, {\n    name: \"chevron-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }))), React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, React.createElement(VictoryPie, {\n    data: totalByCategories,\n    colorScale: totalByCategories.map(function (category) {\n      return category.color;\n    }),\n    style: {\n      labels: {\n        fontSize: RFValue(18),\n        fontWeight: 'bold',\n        fill: theme.colors.shape\n      }\n    },\n    labelRadius: 50,\n    x: \"percentFormatted\",\n    y: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  })), totalByCategories.map(function (item) {\n    return React.createElement(HistoryCard, {\n      key: item.key,\n      title: item.name,\n      amount: item.totalFormatted,\n      color: item.color,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    });\n  })));\n}","map":{"version":3,"sources":["/home/lucas/Documents/Projetos/Expo/meuappcomexpo/src/screens/Resume/index.tsx"],"names":["React","useCallback","useEffect","useState","AsyncStorage","VictoryPie","addMonths","subMonths","format","ptBR","useBottomTabBarHeight","HistoryCard","useTheme","Container","Content","Header","Title","ChartContainer","MonthSelect","MonthSelectButton","MonthSelectIcon","Month","LoadContainer","categories","RFValue","useFocusEffect","Resume","isLoading","setIsLoading","Date","selectedDate","setSelectedDate","totalByCategories","setTotalByCategories","theme","handleDateChange","action","loadData","dataKey","getItem","response","responseFormatted","JSON","parse","expensives","filter","expensive","type","date","getMonth","getFullYear","expensivesTotal","reduce","accumulator","Number","amount","totalByCategory","forEach","category","categorySum","key","totalFormatted","toLocaleString","style","currency","percent","percentFormatted","toFixed","push","name","color","total","colors","primary","paddingHorizontal","paddingBottom","locale","map","labels","fontSize","fontWeight","fill","shape","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,QAA6C,UAA7C;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,OAAOC,WAAP;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,SACEC,SADF,EAEEC,OAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,cALF,EAMEC,WANF,EAOEC,iBAPF,EAQEC,eARF,EASEC,KATF,EAUEC,aAVF;AAYA,SAASC,UAAT;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAoBA,OAAO,SAASC,MAAT,GAAkB;AAAA;;AACvB,kBAAkCvB,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOwB,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAwCzB,QAAQ,CAAC,IAAI0B,IAAJ,EAAD,CAAhD;AAAA;AAAA,MAAOC,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAkD5B,QAAQ,CACxD,EADwD,CAA1D;AAAA;AAAA,MAAO6B,iBAAP;AAAA,MAA0BC,oBAA1B;;AAIA,MAAMC,KAAK,GAAGtB,QAAQ,EAAtB;;AAEA,WAASuB,gBAAT,CAA0BC,MAA1B,EAAmD;AACjDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAIQ,MAAM,KAAK,MAAf,EAAuB;AACrBL,MAAAA,eAAe,CAACzB,SAAS,CAACwB,YAAD,EAAe,CAAf,CAAV,CAAf;AACD,KAFD,MAEO;AACLC,MAAAA,eAAe,CAACxB,SAAS,CAACuB,YAAD,EAAe,CAAf,CAAV,CAAf;AACD;AACF;;AAED,WAAeO,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACET,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACMU,YAAAA,OAFR,GAEkB,0BAFlB;AAAA;AAAA,6CAGyBlC,YAAY,CAACmC,OAAb,CAAqBD,OAArB,CAHzB;;AAAA;AAGQE,YAAAA,QAHR;AAIQC,YAAAA,iBAJR,GAI4BD,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAH,GAA0B,EAJ9D;AAMQI,YAAAA,UANR,GAMqBH,iBAAiB,CAACI,MAAlB,CACjB,UAACC,SAAD;AAAA,qBACEA,SAAS,CAACC,IAAV,KAAmB,UAAnB,IACA,IAAIlB,IAAJ,CAASiB,SAAS,CAACE,IAAnB,EAAyBC,QAAzB,OAAwCnB,YAAY,CAACmB,QAAb,EADxC,IAEA,IAAIpB,IAAJ,CAASiB,SAAS,CAACE,IAAnB,EAAyBE,WAAzB,OAA2CpB,YAAY,CAACoB,WAAb,EAH7C;AAAA,aADiB,CANrB;AAaQC,YAAAA,eAbR,GAa0BP,UAAU,CAACQ,MAAX,CACtB,UAACC,WAAD,EAAsBP,SAAtB,EAAqD;AACnD,qBAAOO,WAAW,GAAGC,MAAM,CAACR,SAAS,CAACS,MAAX,CAA3B;AACD,aAHqB,EAItB,CAJsB,CAb1B;AAoBQC,YAAAA,eApBR,GAoB0C,EApB1C;AAsBEjC,YAAAA,UAAU,CAACkC,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC/B,kBAAIC,WAAW,GAAG,CAAlB;AAEAf,cAAAA,UAAU,CAACa,OAAX,CAAmB,UAACX,SAAD,EAAgC;AACjD,oBAAIA,SAAS,CAACY,QAAV,KAAuBA,QAAQ,CAACE,GAApC,EAAyC;AACvCD,kBAAAA,WAAW,IAAIL,MAAM,CAACR,SAAS,CAACS,MAAX,CAArB;AACD;AACF,eAJD;;AAMA,kBAAII,WAAW,GAAG,CAAlB,EAAqB;AACnB,oBAAME,cAAc,GAAGF,WAAW,CAACG,cAAZ,CAA2B,OAA3B,EAAoC;AACzDC,kBAAAA,KAAK,EAAE,UADkD;AAEzDC,kBAAAA,QAAQ,EAAE;AAF+C,iBAApC,CAAvB;AAKA,oBAAMC,OAAO,GAAIN,WAAW,GAAGR,eAAf,GAAkC,GAAlD;AACA,oBAAMe,gBAAgB,GAAMD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAN,MAAtB;AAEAX,gBAAAA,eAAe,CAACY,IAAhB,CAAqB;AACnBR,kBAAAA,GAAG,EAAEF,QAAQ,CAACE,GADK;AAEnBS,kBAAAA,IAAI,EAAEX,QAAQ,CAACW,IAFI;AAGnBC,kBAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAHG;AAInBC,kBAAAA,KAAK,EAAEZ,WAJY;AAKnBM,kBAAAA,OAAO,EAAPA,OALmB;AAMnBC,kBAAAA,gBAAgB,EAAhBA,gBANmB;AAOnBL,kBAAAA,cAAc,EAAdA;AAPmB,iBAArB;AASD;AACF,aA5BD;AA8BA5B,YAAAA,oBAAoB,CAACuB,eAAD,CAApB;;AApDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuDAtD,EAAAA,SAAS,CAAC,YAAM;AACdmC,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIAZ,EAAAA,cAAc,CACZxB,WAAW,CAAC,YAAM;AAChBoC,IAAAA,QAAQ;AACT,GAFU,EAER,CAACP,YAAD,CAFQ,CADC,CAAd;AAMA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CADF,EAKGH,SAAS,GACR,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEO,KAAK,CAACsC,MAAN,CAAaC,OAAvC;AAAgD,IAAA,IAAI,EAAC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADQ,GAKR,oBAAC,OAAD;AACE,IAAA,8BAA8B,EAAE,KADlC;AAEE,IAAA,qBAAqB,EAAE;AACrBC,MAAAA,iBAAiB,EAAE,EADE;AAErBC,MAAAA,aAAa,EAAEjE,qBAAqB;AAFf,KAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE;AAAA,aAAMyB,gBAAgB,CAAC,MAAD,CAAtB;AAAA,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,MAAM,CAACsB,YAAD,EAAe,YAAf,EAA6B;AAAE8C,IAAAA,MAAM,EAAEnE;AAAV,GAA7B,CADT,CALF,EAQE,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE;AAAA,aAAM0B,gBAAgB,CAAC,MAAD,CAAtB;AAAA,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CAPF,EAoBE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEH,iBADR;AAEE,IAAA,UAAU,EAAEA,iBAAiB,CAAC6C,GAAlB,CAAsB,UAACnB,QAAD;AAAA,aAAcA,QAAQ,CAACY,KAAvB;AAAA,KAAtB,CAFd;AAGE,IAAA,KAAK,EAAE;AACLQ,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEvD,OAAO,CAAC,EAAD,CADX;AAENwD,QAAAA,UAAU,EAAE,MAFN;AAGNC,QAAAA,IAAI,EAAE/C,KAAK,CAACsC,MAAN,CAAaU;AAHb;AADH,KAHT;AAUE,IAAA,WAAW,EAAE,EAVf;AAWE,IAAA,CAAC,EAAC,kBAXJ;AAYE,IAAA,CAAC,EAAC,OAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CApBF,EAqCGlD,iBAAiB,CAAC6C,GAAlB,CAAsB,UAACM,IAAD;AAAA,WACrB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACvB,GADZ;AAEE,MAAA,KAAK,EAAEuB,IAAI,CAACd,IAFd;AAGE,MAAA,MAAM,EAAEc,IAAI,CAACtB,cAHf;AAIE,MAAA,KAAK,EAAEsB,IAAI,CAACb,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADqB;AAAA,GAAtB,CArCH,CAVJ,CADF;AA4DD","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { VictoryPie } from 'victory-native';\nimport { addMonths, subMonths, format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\n\nimport HistoryCard from '../../components/HistoryCard';\n\nimport { useTheme } from 'styled-components';\n\nimport {\n  Container,\n  Content,\n  Header,\n  Title,\n  ChartContainer,\n  MonthSelect,\n  MonthSelectButton,\n  MonthSelectIcon,\n  Month,\n  LoadContainer,\n} from './styles';\nimport { categories } from '../../utils/categories';\nimport { RFValue } from 'react-native-responsive-fontsize';\nimport { useFocusEffect } from '@react-navigation/native';\n\ninterface TransactionData {\n  type: 'positive' | 'negative';\n  name: string;\n  amount: string;\n  category: string;\n  date: string;\n}\n\ninterface CategoryData {\n  key: string;\n  name: string;\n  total: number;\n  totalFormatted: string;\n  color: string;\n  percentFormatted: string;\n  percent: number;\n}\n\nexport function Resume() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [totalByCategories, setTotalByCategories] = useState<CategoryData[]>(\n    []\n  );\n\n  const theme = useTheme();\n\n  function handleDateChange(action: 'next' | 'prev') {\n    setIsLoading(true);\n\n    if (action === 'next') {\n      setSelectedDate(addMonths(selectedDate, 1));\n    } else {\n      setSelectedDate(subMonths(selectedDate, 1));\n    }\n  }\n\n  async function loadData() {\n    setIsLoading(false);\n    const dataKey = '@gofinances:transactions';\n    const response = await AsyncStorage.getItem(dataKey);\n    const responseFormatted = response ? JSON.parse(response) : [];\n\n    const expensives = responseFormatted.filter(\n      (expensive: TransactionData) =>\n        expensive.type === 'negative' &&\n        new Date(expensive.date).getMonth() === selectedDate.getMonth() &&\n        new Date(expensive.date).getFullYear() === selectedDate.getFullYear()\n    );\n\n    const expensivesTotal = expensives.reduce(\n      (accumulator: number, expensive: TransactionData) => {\n        return accumulator + Number(expensive.amount);\n      },\n      0\n    );\n\n    const totalByCategory: CategoryData[] = [];\n\n    categories.forEach((category) => {\n      let categorySum = 0;\n\n      expensives.forEach((expensive: TransactionData) => {\n        if (expensive.category === category.key) {\n          categorySum += Number(expensive.amount);\n        }\n      });\n\n      if (categorySum > 0) {\n        const totalFormatted = categorySum.toLocaleString('pt-BR', {\n          style: 'currency',\n          currency: 'BRL',\n        });\n\n        const percent = (categorySum / expensivesTotal) * 100;\n        const percentFormatted = `${percent.toFixed(0)}%`;\n\n        totalByCategory.push({\n          key: category.key,\n          name: category.name,\n          color: category.color,\n          total: categorySum,\n          percent,\n          percentFormatted,\n          totalFormatted,\n        });\n      }\n    });\n\n    setTotalByCategories(totalByCategory);\n  }\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useFocusEffect(\n    useCallback(() => {\n      loadData();\n    }, [selectedDate])\n  );\n\n  return (\n    <Container>\n      <Header>\n        <Title>Resumo por categoria</Title>\n      </Header>\n\n      {isLoading ? (\n        <LoadContainer>\n          <ActivityIndicator color={theme.colors.primary} size=\"large\" />\n        </LoadContainer>\n      ) : (\n        <Content\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={{\n            paddingHorizontal: 24,\n            paddingBottom: useBottomTabBarHeight(),\n          }}\n        >\n          <MonthSelect>\n            <MonthSelectButton onPress={() => handleDateChange('prev')}>\n              <MonthSelectIcon name=\"chevron-left\"></MonthSelectIcon>\n            </MonthSelectButton>\n\n            <Month>\n              {format(selectedDate, 'MMMM, yyyy', { locale: ptBR })}\n            </Month>\n            <MonthSelectButton onPress={() => handleDateChange('next')}>\n              <MonthSelectIcon name=\"chevron-right\"></MonthSelectIcon>\n            </MonthSelectButton>\n          </MonthSelect>\n\n          <ChartContainer>\n            <VictoryPie\n              data={totalByCategories}\n              colorScale={totalByCategories.map((category) => category.color)}\n              style={{\n                labels: {\n                  fontSize: RFValue(18),\n                  fontWeight: 'bold',\n                  fill: theme.colors.shape,\n                },\n              }}\n              labelRadius={50}\n              x=\"percentFormatted\"\n              y=\"total\"\n            />\n          </ChartContainer>\n\n          {totalByCategories.map((item) => (\n            <HistoryCard\n              key={item.key}\n              title={item.name}\n              amount={item.totalFormatted}\n              color={item.color}\n            />\n          ))}\n        </Content>\n      )}\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}